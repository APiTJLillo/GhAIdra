buildscript {
    repositories {
        maven {
            url "https://repo.gradle.org/gradle/libs-releases"
        }
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'

repositories {
    mavenCentral()
}

def pluginName = 'GhidraAzureLLM'
def pluginVersion = '11.2.1'
def pluginDescription = 'Integrates Azure AI services with Ghidra for enhanced code analysis'
def pluginCategory = 'Analysis'

// Define extension plugin location
def ghidraInstallDir = System.getenv("GHIDRA_INSTALL_DIR") ?: "/opt/ghidra_11.2.1"

rootProject.ext {
    DISTRIBUTION_DIR = file('dist')
    NAME = pluginName
    VERSION = pluginVersion
    RELEASE_DATE = new Date()
    CATEGORY = pluginCategory
    DESCRIPTION = pluginDescription
    AUTHOR = 'Your Name'
}

eclipse.project.name = pluginName

// Apply Ghidra extension build script
apply from: "${ghidraInstallDir}/support/buildExtension.gradle"

dependencies {
    // Ghidra dependencies
    implementation fileTree(dir: "${ghidraInstallDir}/Ghidra/Framework/Utility/lib", include: ['*.jar'])
    implementation fileTree(dir: "${ghidraInstallDir}/Ghidra/Framework/SoftwareModeling/lib", include: ['*.jar'])
    implementation fileTree(dir: "${ghidraInstallDir}/Ghidra/Framework/Project/lib", include: ['*.jar'])
    implementation fileTree(dir: "${ghidraInstallDir}/Ghidra/Framework/Generic/lib", include: ['*.jar'])
    implementation fileTree(dir: "${ghidraInstallDir}/Ghidra/Framework/Docking/lib", include: ['*.jar'])
    implementation fileTree(dir: "${ghidraInstallDir}/Ghidra/Framework/Help/lib", include: ['*.jar'])
    implementation fileTree(dir: "${ghidraInstallDir}/Ghidra/Features/Base/lib", include: ['*.jar'])
    implementation fileTree(dir: "${ghidraInstallDir}/Ghidra/Features/Decompiler/lib", include: ['*.jar'])
    implementation fileTree(dir: "${ghidraInstallDir}/Ghidra/Processors/x86/lib", include: ['*.jar'])
    
    // External dependencies - these will be bundled in the final JAR
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.16.1'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.16.1'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.16.1'
}

sourceSets {
    main {
        java {
            srcDirs 'src/main/java'
        }
        resources {
            srcDirs 'src/main/resources'
            if (file('src/main/help').exists()) {
                srcDirs 'src/main/help'
            }
        }
    }
}

processResources {
    from ('src/main/help') {
        into 'help'
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

clean {
    delete "$projectDir/lib"
    delete "$projectDir/build"
    delete "$projectDir/dist"
}

jar {
    manifest {
        attributes(
            'Built-By': System.getProperty('user.name'),
            'Build-Date': RELEASE_DATE,
            'Build-Year': RELEASE_DATE.format('yyyy'),
            'Implementation-Title': project.name,
            'Implementation-Version': VERSION
        )
    }
    zip64 = true
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    
    // Include external dependencies in the JAR
    from {
        configurations.runtimeClasspath
            .filter { it.name.contains('okhttp') || it.name.contains('jackson') || it.name.contains('gson') }
            .collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task checkGhidraInstallDir {
    doFirst {
        if (!file(ghidraInstallDir).exists()) {
            throw new GradleException("Ghidra installation directory not found: $ghidraInstallDir")
        }
    }
}

compileJava {
    dependsOn checkGhidraInstallDir
    options.fork = true
    options.forkOptions.jvmArgs += ['-Xmx2g']
}

task prepareExtension {
    dependsOn jar
    doLast {
        def propsFile = file("${projectDir}/extension.properties")
        propsFile.text = """name=${pluginName}
description=${pluginDescription}
author=${rootProject.ext.AUTHOR}
createdOn=${RELEASE_DATE.format('yyyy-MM-dd')}
version=${pluginVersion}
category=${pluginCategory}"""
    }
}

buildExtension.dependsOn prepareExtension
